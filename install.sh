#!/bin/bash
# ===============================================================================
# McP Bridge - Script d'Installation Unifi√© pour Raspberry Pi
# Version Phase 3.4 - Interface Web Compl√®te
# ===============================================================================
#
# Ce script installe et configure McP Bridge avec l'interface web compl√®te
# sur Raspberry Pi. Il combine toutes les fonctionnalit√©s pr√©c√©dentes.
#
# Usage: 
#   curl -fsSL https://raw.githubusercontent.com/Jonathan97480/McpHomeAssistant/master/install_unified.sh | bash
#   ou
#   wget -O - https://raw.githubusercontent.com/Jonathan97480/McpHomeAssistant/master/install_unified.sh | bash
#
# ===============================================================================

set -e  # Exit on any error

# ===============================================================================
# CONFIGURATION
# ===============================================================================

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration par d√©faut
PROJECT_NAME="McpHomeAssistant"
PROJECT_DIR="$HOME/$PROJECT_NAME"
SERVICE_NAME="mcpbridge"
INSTALL_MODE="web"  # web ou mcp (legacy)
WEB_PORT=8080
MCP_PORT=3002
REPO_URL="https://github.com/Jonathan97480/McpHomeAssistant.git"
PYTHON_VERSION="python3"
MIN_PYTHON_VERSION="3.8"

# ===============================================================================
# FONCTIONS UTILITAIRES
# ===============================================================================

# Fonction de log avec horodatage
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] ‚úì $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ‚úó $1${NC}" >&2
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] ‚ö† $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] ‚Ñπ $1${NC}"
}

success() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] üéâ $1${NC}"
}

# Affichage du banner
show_banner() {
    echo -e "${CYAN}"
    echo "==============================================================================="
    echo "                    McP Bridge - Installation Unified"
    echo "                          Phase 3.4 - Interface Web"
    echo "==============================================================================="
    echo -e "${NC}"
    echo "üöÄ Installation automatique de McP Bridge avec interface web compl√®te"
    echo "üìã Fonctionnalit√©s:"
    echo "   ‚Ä¢ Interface web responsive avec dashboard"
    echo "   ‚Ä¢ API REST compl√®te (25+ endpoints)"
    echo "   ‚Ä¢ Syst√®me d'authentification s√©curis√©"
    echo "   ‚Ä¢ Gestion des permissions granulaire"
    echo "   ‚Ä¢ Configuration multi-instances Home Assistant"
    echo "   ‚Ä¢ Service systemd int√©gr√©"
    echo "   ‚Ä¢ Tests automatis√©s"
    echo
}

# Demander confirmation √† l'utilisateur
ask_confirmation() {
    local default_choice="Y"
    while true; do
        read -p "$(echo -e ${YELLOW}Continuer l\'installation ? [Y/n]: ${NC})" choice
        choice=${choice:-$default_choice}
        case $choice in
            [Yy]* ) return 0;;
            [Nn]* ) echo "Installation annul√©e."; exit 0;;
            * ) echo "R√©pondez par 'y' ou 'n'.";;
        esac
    done
}

# Menu de choix du mode d'installation
choose_installation_mode() {
    echo
    info "Choisissez le mode d'installation:"
    echo "  1) Interface Web (Recommand√©) - Port $WEB_PORT"
    echo "  2) MCP Server Legacy - Port $MCP_PORT"
    echo "  3) Installation compl√®te (Web + MCP)"
    echo
    
    while true; do
        read -p "$(echo -e ${YELLOW}Votre choix [1-3]: ${NC})" choice
        case $choice in
            1) INSTALL_MODE="web"; break;;
            2) INSTALL_MODE="mcp"; break;;
            3) INSTALL_MODE="both"; break;;
            *) echo "Choix invalide. Entrez 1, 2 ou 3.";;
        esac
    done
    
    info "Mode s√©lectionn√©: $INSTALL_MODE"
}

# ===============================================================================
# V√âRIFICATIONS SYST√àME
# ===============================================================================

# V√©rification des privil√®ges root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error "Ne pas ex√©cuter ce script en tant que root pour des raisons de s√©curit√©."
        error "Utilisez un utilisateur normal. sudo sera utilis√© quand n√©cessaire."
        exit 1
    fi
    
    if ! sudo -n true 2>/dev/null; then
        warn "Vous devrez peut-√™tre entrer votre mot de passe pour sudo"
    fi
    
    log "Utilisateur: $USER"
}

# V√©rification du syst√®me
check_system() {
    info "V√©rification du syst√®me..."
    
    # OS
    if [[ -f /etc/debian_version ]]; then
        OS_VERSION=$(cat /etc/debian_version)
        log "Syst√®me Debian/Raspbian d√©tect√©: $OS_VERSION"
    elif [[ -f /etc/redhat-release ]]; then
        warn "Syst√®me RedHat d√©tect√© - peut n√©cessiter des adaptations"
    else
        warn "Syst√®me non reconnu - installation au risque de l'utilisateur"
    fi
    
    # Architecture
    ARCH=$(uname -m)
    case $ARCH in
        armv7l) log "Architecture: Raspberry Pi 32-bit (ARMv7)";;
        aarch64) log "Architecture: Raspberry Pi 64-bit (ARM64)";;
        x86_64) warn "Architecture: x86_64 - Non optimal pour Raspberry Pi";;
        *) warn "Architecture non reconnue: $ARCH";;
    esac
    
    # M√©moire
    MEM_TOTAL=$(free -m | awk 'NR==2{print $2}')
    MEM_AVAILABLE=$(free -m | awk 'NR==2{print $7}')
    log "M√©moire: ${MEM_TOTAL}MB total, ${MEM_AVAILABLE}MB disponible"
    
    if [ "$MEM_AVAILABLE" -lt 100 ]; then
        warn "M√©moire faible ($MEM_AVAILABLE MB) - Performance r√©duite possible"
        if [ "$MEM_TOTAL" -lt 512 ]; then
            error "M√©moire insuffisante pour l'installation"
            exit 1
        fi
    fi
    
    # Espace disque
    DISK_AVAILABLE=$(df -BM "$HOME" | awk 'NR==2 {print $4}' | sed 's/M//')
    log "Espace disque disponible: ${DISK_AVAILABLE}MB"
    
    if [ "$DISK_AVAILABLE" -lt 500 ]; then
        error "Espace disque insuffisant (${DISK_AVAILABLE}MB < 500MB requis)"
        exit 1
    fi
}

# V√©rification de Python
check_python() {
    info "V√©rification de Python..."
    
    if ! command -v python3 &> /dev/null; then
        error "Python 3 non install√©"
        exit 1
    fi
    
    PYTHON_VER=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    log "Version Python: $PYTHON_VER"
    
    # V√©rification version minimale
    if python3 -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)"; then
        log "Version Python compatible (>= 3.8)"
    else
        error "Python 3.8+ requis. Version actuelle: $PYTHON_VER"
        exit 1
    fi
    
    # V√©rification de pip
    if ! python3 -m pip --version &> /dev/null; then
        warn "pip non disponible - installation n√©cessaire"
        return 1
    fi
    
    log "pip disponible"
    return 0
}

# V√©rification de Git
check_git() {
    if ! command -v git &> /dev/null; then
        warn "Git non install√© - installation n√©cessaire"
        return 1
    fi
    
    log "Git disponible"
    return 0
}

# V√©rification Home Assistant (optionnel)
check_homeassistant() {
    info "V√©rification Home Assistant..."
    
    if systemctl is-active --quiet homeassistant 2>/dev/null; then
        log "Service Home Assistant actif"
        HA_STATUS="running"
    elif systemctl is-enabled --quiet homeassistant 2>/dev/null; then
        warn "Service Home Assistant install√© mais arr√™t√©"
        HA_STATUS="stopped"
    else
        warn "Home Assistant non d√©tect√© comme service systemd"
        warn "McP Bridge fonctionnera quand m√™me"
        HA_STATUS="unknown"
    fi
    
    # D√©tection du port HA
    if netstat -tln 2>/dev/null | grep -q ":8123 "; then
        log "Home Assistant d√©tect√© sur le port 8123"
    fi
}

# ===============================================================================
# INSTALLATION DES D√âPENDANCES
# ===============================================================================

# Installation des paquets syst√®me
install_system_packages() {
    info "Installation des paquets syst√®me..."
    
    # Mise √† jour de la liste des paquets
    sudo apt update
    
    # Paquets essentiels
    local packages=(
        "python3"
        "python3-pip"
        "python3-venv"
        "python3-dev"
        "git"
        "curl"
        "wget"
        "build-essential"
        "libffi-dev"
        "libssl-dev"
        "sqlite3"
        "lsof"
        "net-tools"
    )
    
    # Paquets optionnels pour optimisation
    local optional_packages=(
        "htop"
        "ufw"
        "fail2ban"
        "logrotate"
    )
    
    # Installation des paquets essentiels
    for package in "${packages[@]}"; do
        if dpkg -l | grep -q "^ii  $package "; then
            log "$package d√©j√† install√©"
        else
            info "Installation de $package..."
            sudo apt install -y "$package"
        fi
    done
    
    # Installation des paquets optionnels (sans √©chec)
    for package in "${optional_packages[@]}"; do
        if dpkg -l | grep -q "^ii  $package "; then
            log "$package d√©j√† install√©"
        else
            if sudo apt install -y "$package" 2>/dev/null; then
                log "$package install√©"
            else
                warn "$package non install√© (optionnel)"
            fi
        fi
    done
    
    log "Paquets syst√®me install√©s"
}

# ===============================================================================
# GESTION DES SERVICES EXISTANTS
# ===============================================================================

# Arr√™t des services existants
stop_existing_services() {
    info "V√©rification des services existants..."
    
    # V√©rification du service mcpbridge
    if systemctl is-active --quiet $SERVICE_NAME 2>/dev/null; then
        warn "Service $SERVICE_NAME actif - arr√™t en cours"
        sudo systemctl stop $SERVICE_NAME
        log "Service $SERVICE_NAME arr√™t√©"
    fi
    
    # V√©rification du service legacy
    if systemctl is-active --quiet homeassistant-mcp-server 2>/dev/null; then
        warn "Service legacy homeassistant-mcp-server d√©tect√© - arr√™t"
        sudo systemctl stop homeassistant-mcp-server
        sudo systemctl disable homeassistant-mcp-server
        log "Service legacy arr√™t√© et d√©sactiv√©"
    fi
    
    # Arr√™t des processus sur les ports
    local ports=("$WEB_PORT" "$MCP_PORT")
    for port in "${ports[@]}"; do
        if lsof -ti:$port &>/dev/null; then
            warn "Processus d√©tect√© sur le port $port - arr√™t forc√©"
            sudo kill -9 $(lsof -ti:$port) 2>/dev/null || true
            log "Port $port lib√©r√©"
        fi
    done
}

# ===============================================================================
# INSTALLATION DU PROJET
# ===============================================================================

# Sauvegarde de l'installation existante
backup_existing_installation() {
    if [ -d "$PROJECT_DIR" ]; then
        local backup_dir="${PROJECT_DIR}.backup.$(date +%Y%m%d_%H%M%S)"
        warn "Installation existante d√©tect√©e"
        info "Cr√©ation de la sauvegarde: $backup_dir"
        
        mv "$PROJECT_DIR" "$backup_dir"
        log "Sauvegarde cr√©√©e"
        
        # Sauvegarde de la base de donn√©es si elle existe
        if [ -f "$backup_dir/bridge_data.db" ]; then
            cp "$backup_dir/bridge_data.db" "$HOME/bridge_data.db.backup" 2>/dev/null || true
            log "Base de donn√©es sauvegard√©e"
        fi
    fi
}

# Clonage du projet
clone_project() {
    info "Clonage du projet depuis GitHub..."
    
    if ! git clone "$REPO_URL" "$PROJECT_DIR"; then
        error "√âchec du clonage depuis $REPO_URL"
        exit 1
    fi
    
    cd "$PROJECT_DIR"
    log "Projet clon√© dans $PROJECT_DIR"
    
    # Affichage des informations du commit
    local commit_hash=$(git rev-parse --short HEAD)
    local commit_date=$(git log -1 --format="%ci")
    info "Commit: $commit_hash ($commit_date)"
}

# ===============================================================================
# CONFIGURATION PYTHON
# ===============================================================================

# Configuration de l'environnement virtuel Python
setup_python_environment() {
    info "Configuration de l'environnement Python..."
    
    cd "$PROJECT_DIR"
    
    # Cr√©ation de l'environnement virtuel
    if [ -d "venv" ]; then
        warn "Environnement virtuel existant - suppression"
        rm -rf venv
    fi
    
    python3 -m venv venv
    log "Environnement virtuel cr√©√©"
    
    # Activation et mise √† jour
    source venv/bin/activate
    
    # Mise √† jour de pip
    pip install --upgrade pip setuptools wheel
    log "pip mis √† jour"
    
    # Installation des d√©pendances selon le mode
    local requirements=""
    case $INSTALL_MODE in
        "web"|"both")
            requirements="fastapi uvicorn pydantic httpx aiohttp cryptography bcrypt python-jose[cryptography] python-multipart passlib email-validator requests jinja2"
            ;;
        "mcp")
            requirements="fastapi uvicorn pydantic httpx aiohttp cryptography"
            ;;
    esac
    
    info "Installation des d√©pendances Python..."
    if pip install $requirements; then
        log "D√©pendances Python install√©es"
    else
        error "√âchec de l'installation des d√©pendances"
        exit 1
    fi
    
    # V√©rification des imports critiques
    python3 -c "import fastapi, uvicorn, pydantic, httpx; print('Imports critiques OK')"
    log "Imports Python valid√©s"
}

# ===============================================================================
# CONFIGURATION DE LA BASE DE DONN√âES
# ===============================================================================

# Initialisation de la base de donn√©es
setup_database() {
    info "Configuration de la base de donn√©es..."
    
    cd "$PROJECT_DIR"
    source venv/bin/activate
    
    # Restauration de la sauvegarde si disponible
    if [ -f "$HOME/bridge_data.db.backup" ]; then
        warn "Restauration de la base de donn√©es sauvegard√©e"
        cp "$HOME/bridge_data.db.backup" "bridge_data.db"
        log "Base de donn√©es restaur√©e"
    else
        # Initialisation temporaire pour cr√©er la structure
        info "Initialisation de la nouvelle base de donn√©es..."
        timeout 10 python3 bridge_server.py --init-db &>/dev/null &
        local server_pid=$!
        sleep 5
        kill $server_pid 2>/dev/null || true
        wait $server_pid 2>/dev/null || true
        
        if [ -f "bridge_data.db" ]; then
            log "Base de donn√©es initialis√©e"
        else
            warn "Base de donn√©es sera cr√©√©e au premier d√©marrage"
        fi
    fi
    
    # Configuration des permissions
    chmod 644 bridge_data.db 2>/dev/null || true
}

# ===============================================================================
# CONFIGURATION DU SERVICE SYSTEMD
# ===============================================================================

# Cr√©ation du service systemd
create_systemd_service() {
    info "Configuration du service systemd..."
    
    local service_file="/etc/systemd/system/$SERVICE_NAME.service"
    local exec_script="start_server.py"
    
    # D√©termination du script selon le mode
    case $INSTALL_MODE in
        "web") exec_script="start_server.py";;
        "mcp") exec_script="bridge_server.py";;
        "both") exec_script="start_server.py";;
    esac
    
    # Cr√©ation du fichier service
    sudo tee "$service_file" > /dev/null <<EOF
[Unit]
Description=McP Bridge Server - Home Assistant MCP Bridge
Documentation=https://github.com/Jonathan97480/McpHomeAssistant
After=network.target network-online.target
Wants=network-online.target
ConditionPathExists=$PROJECT_DIR

[Service]
Type=simple
User=$USER
Group=$USER
WorkingDirectory=$PROJECT_DIR
Environment=PATH=$PROJECT_DIR/venv/bin
Environment=PYTHONPATH=$PROJECT_DIR
ExecStart=$PROJECT_DIR/venv/bin/python $exec_script
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10
TimeoutStartSec=30
TimeoutStopSec=30

# S√©curit√©
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$PROJECT_DIR

# Logs
StandardOutput=journal
StandardError=journal
SyslogIdentifier=$SERVICE_NAME

[Install]
WantedBy=multi-user.target
EOF

    # Rechargement et activation
    sudo systemctl daemon-reload
    sudo systemctl enable $SERVICE_NAME
    
    log "Service systemd configur√© et activ√©"
}

# ===============================================================================
# CONFIGURATION R√âSEAU ET S√âCURIT√â
# ===============================================================================

# Configuration du firewall
setup_firewall() {
    info "Configuration du firewall..."
    
    if command -v ufw &> /dev/null; then
        # Configuration UFW
        local ports=""
        case $INSTALL_MODE in
            "web") ports="$WEB_PORT";;
            "mcp") ports="$MCP_PORT";;
            "both") ports="$WEB_PORT $MCP_PORT";;
        esac
        
        for port in $ports; do
            if sudo ufw allow $port/tcp; then
                log "Port $port ouvert dans UFW"
            else
                warn "Impossible d'ouvrir le port $port dans UFW"
            fi
        done
        
        # Affichage du statut si UFW est actif
        if sudo ufw status | grep -q "Status: active"; then
            info "Firewall UFW actif avec les ports configur√©s"
        else
            warn "UFW install√© mais inactif. Activez-le avec: sudo ufw enable"
        fi
    else
        warn "UFW non install√©. Configurez manuellement votre firewall:"
        case $INSTALL_MODE in
            "web") warn "  - Autoriser le port $WEB_PORT/tcp";;
            "mcp") warn "  - Autoriser le port $MCP_PORT/tcp";;
            "both") warn "  - Autoriser les ports $WEB_PORT/tcp et $MCP_PORT/tcp";;
        esac
    fi
}

# Configuration de la s√©curit√© suppl√©mentaire
setup_security() {
    info "Configuration de la s√©curit√©..."
    
    # Fail2ban pour SSH (si disponible)
    if command -v fail2ban-server &> /dev/null; then
        if systemctl is-active --quiet fail2ban; then
            log "Fail2ban actif pour la protection SSH"
        else
            warn "Fail2ban install√© mais inactif"
        fi
    fi
    
    # Configuration des limites syst√®me
    local limits_file="/etc/security/limits.d/mcpbridge.conf"
    if [ ! -f "$limits_file" ]; then
        sudo tee "$limits_file" > /dev/null <<EOF
# Limites pour McP Bridge
$USER soft nofile 65536
$USER hard nofile 65536
$USER soft nproc 4096
$USER hard nproc 4096
EOF
        log "Limites syst√®me configur√©es"
    fi
}

# ===============================================================================
# TESTS ET VALIDATION
# ===============================================================================

# D√©marrage du service pour tests
start_service_for_tests() {
    info "D√©marrage du service pour les tests..."
    
    sudo systemctl start $SERVICE_NAME
    
    # Attente du d√©marrage
    local max_wait=30
    local wait_time=0
    
    while [ $wait_time -lt $max_wait ]; do
        if systemctl is-active --quiet $SERVICE_NAME; then
            log "Service d√©marr√© avec succ√®s"
            sleep 5  # Attente suppl√©mentaire pour l'initialisation
            return 0
        fi
        sleep 2
        wait_time=$((wait_time + 2))
    done
    
    error "Le service n'a pas d√©marr√© dans les temps"
    sudo journalctl -u $SERVICE_NAME --no-pager -n 20
    return 1
}

# Tests de connectivit√©
run_connectivity_tests() {
    info "Tests de connectivit√©..."
    
    local success=0
    local total=0
    
    # Test selon le mode d'installation
    case $INSTALL_MODE in
        "web"|"both")
            # Test de l'interface web
            total=$((total + 1))
            if curl -f http://localhost:$WEB_PORT/health &>/dev/null; then
                log "‚úì Interface web accessible (port $WEB_PORT)"
                success=$((success + 1))
            else
                warn "‚úó Interface web inaccessible (port $WEB_PORT)"
            fi
            
            # Test de la page d'accueil
            total=$((total + 1))
            if curl -f http://localhost:$WEB_PORT/ | grep -q "McP Bridge" &>/dev/null; then
                log "‚úì Page d'accueil charg√©e"
                success=$((success + 1))
            else
                warn "‚úó Page d'accueil non accessible"
            fi
            ;;
    esac
    
    if [ "$INSTALL_MODE" = "mcp" ] || [ "$INSTALL_MODE" = "both" ]; then
        # Test MCP server
        total=$((total + 1))
        if curl -f http://localhost:$MCP_PORT/health &>/dev/null; then
            log "‚úì Serveur MCP accessible (port $MCP_PORT)"
            success=$((success + 1))
        else
            warn "‚úó Serveur MCP inaccessible (port $MCP_PORT)"
        fi
    fi
    
    # Test de la base de donn√©es
    total=$((total + 1))
    if [ -f "$PROJECT_DIR/bridge_data.db" ]; then
        log "‚úì Base de donn√©es pr√©sente"
        success=$((success + 1))
    else
        warn "‚úó Base de donn√©es manquante"
    fi
    
    # R√©sultat des tests
    info "Tests de connectivit√©: $success/$total r√©ussis"
    return $((total - success))
}

# Ex√©cution des tests automatis√©s
run_automated_tests() {
    info "Ex√©cution des tests automatis√©s..."
    
    cd "$PROJECT_DIR"
    source venv/bin/activate
    
    # Test simple si disponible
    if [ -f "tests/test_simple.py" ]; then
        if python3 tests/test_simple.py; then
            log "‚úì Tests simples r√©ussis"
            return 0
        else
            warn "‚úó √âchec des tests simples"
            return 1
        fi
    else
        warn "Script de test simple non trouv√©"
        return 0
    fi
}

# ===============================================================================
# FINALISATION
# ===============================================================================

# Affichage des informations finales
show_final_information() {
    local ip_address=$(hostname -I | awk '{print $1}')
    
    echo
    success "=== Installation Termin√©e avec Succ√®s ==="
    echo
    
    case $INSTALL_MODE in
        "web")
            echo "üåê Interface Web McP Bridge:"
            echo "   Local:  http://localhost:$WEB_PORT"
            echo "   R√©seau: http://$ip_address:$WEB_PORT"
            echo
            echo "üîê Connexion par d√©faut:"
            echo "   Utilisateur: admin"
            echo "   Mot de passe: Admin123!"
            echo
            echo "‚ö†Ô∏è  IMPORTANT: Changez le mot de passe imm√©diatement apr√®s la premi√®re connexion"
            ;;
        "mcp")
            echo "üîß Serveur MCP:"
            echo "   Local:  http://localhost:$MCP_PORT"
            echo "   R√©seau: http://$ip_address:$MCP_PORT"
            ;;
        "both")
            echo "üåê Interface Web:"
            echo "   Local:  http://localhost:$WEB_PORT"
            echo "   R√©seau: http://$ip_address:$WEB_PORT"
            echo
            echo "üîß Serveur MCP:"
            echo "   Local:  http://localhost:$MCP_PORT"
            echo "   R√©seau: http://$ip_address:$MCP_PORT"
            echo
            echo "üîê Connexion Web (admin/Admin123!)"
            ;;
    esac
    
    echo
    echo "üõ†Ô∏è  Commandes utiles:"
    echo "   sudo systemctl status $SERVICE_NAME     # Statut du service"
    echo "   sudo systemctl restart $SERVICE_NAME    # Red√©marrer"
    echo "   sudo systemctl stop $SERVICE_NAME       # Arr√™ter"
    echo "   sudo journalctl -u $SERVICE_NAME -f     # Logs en temps r√©el"
    echo
    echo "üìÅ R√©pertoire d'installation: $PROJECT_DIR"
    echo "üìä Mode d'installation: $INSTALL_MODE"
    echo
    echo "üìö Documentation:"
    echo "   ‚Ä¢ Guide complet: cat $PROJECT_DIR/DEPLOYMENT_GUIDE.md"
    echo "   ‚Ä¢ Installation Raspberry Pi: cat $PROJECT_DIR/RASPBERRY_PI_INSTALL.md"
    echo "   ‚Ä¢ Guide rapide: cat $PROJECT_DIR/QUICK_INSTALL_RPI.md"
    echo
    
    if [ "$INSTALL_MODE" = "web" ] || [ "$INSTALL_MODE" = "both" ]; then
        echo "üè† Configuration Home Assistant:"
        echo "   1. G√©n√©rer un token Long-Term dans Home Assistant"
        echo "   2. Aller dans Configuration ‚Üí Home Assistant"
        echo "   3. Ajouter votre instance avec l'URL et le token"
        echo "   4. Tester la connexion"
        echo "   5. Configurer les permissions dans le menu Permissions"
        echo
    fi
    
    echo "‚úÖ Installation Phase 3.4 compl√®te !"
}

# Nettoyage en cas d'erreur
cleanup_on_error() {
    error "Erreur pendant l'installation"
    
    # Arr√™t du service si d√©marr√©
    if systemctl is-active --quiet $SERVICE_NAME 2>/dev/null; then
        sudo systemctl stop $SERVICE_NAME
    fi
    
    # Affichage des logs pour debugging
    if [ -f "/var/log/syslog" ]; then
        warn "Derni√®res lignes du syslog:"
        tail -20 /var/log/syslog | grep -i "$SERVICE_NAME" || true
    fi
    
    echo
    error "Consultez les logs pour plus de d√©tails:"
    error "  sudo journalctl -u $SERVICE_NAME --no-pager"
    error "  cat $PROJECT_DIR/install.log"
    
    exit 1
}

# ===============================================================================
# FONCTION PRINCIPALE
# ===============================================================================

main() {
    # Gestion des erreurs
    trap cleanup_on_error ERR
    
    # Affichage du banner
    show_banner
    
    # Menu de s√©lection
    choose_installation_mode
    
    # Demande de confirmation
    ask_confirmation
    
    # D√©but de l'installation
    info "D√©but de l'installation..."
    local start_time=$(date +%s)
    
    # √âtapes de v√©rification
    check_root
    check_system
    check_python
    check_git
    check_homeassistant
    
    # Installation des d√©pendances
    install_system_packages
    
    # Gestion des services existants
    stop_existing_services
    
    # Installation du projet
    backup_existing_installation
    clone_project
    
    # Configuration Python
    setup_python_environment
    
    # Configuration de la base de donn√©es
    setup_database
    
    # Configuration du service
    create_systemd_service
    
    # Configuration r√©seau et s√©curit√©
    setup_firewall
    setup_security
    
    # Tests et validation
    start_service_for_tests
    run_connectivity_tests
    run_automated_tests
    
    # Finalisation
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    show_final_information
    
    success "Installation termin√©e en ${duration}s"
    
    return 0
}

# ===============================================================================
# POINT D'ENTR√âE
# ===============================================================================

# V√©rification que le script est ex√©cut√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi