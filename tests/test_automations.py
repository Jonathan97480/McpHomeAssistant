#!/usr/bin/env python3
"""
Script de test des fonctionnalit√©s d'automatisation
"""

import asyncio
import sys
import os
import json
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Ajouter le chemin du module
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from homeassistant_mcp_server.server import HomeAssistantClient

async def test_automation_features():
    """Tester les fonctionnalit√©s d'automatisation"""
    
    hass_url = os.getenv("HASS_URL", "http://192.168.1.22:8123")
    hass_token = os.getenv("HASS_TOKEN", "")
    
    if not hass_token:
        print("‚ùå Token requis")
        return
    
    async with HomeAssistantClient(hass_url, hass_token) as client:
        print("ü§ñ Test des fonctionnalit√©s d'automatisation\n")
        
        # 1. Lister les automatisations existantes
        print("üìã 1. Liste des automatisations existantes:")
        try:
            automations = await client.list_automations()
            print(f"   Trouv√© {len(automations)} automatisations")
            
            if automations:
                for i, auto in enumerate(automations[:3]):  # Afficher seulement les 3 premi√®res
                    print(f"   [{i+1}] {auto.get('alias', 'Sans nom')} (ID: {auto.get('id', 'N/A')})")
            else:
                print("   Aucune automatisation trouv√©e")
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
        
        print()
        
        # 2. Cr√©er une automatisation de test simple
        print("üîß 2. Cr√©ation d'une automatisation de test:")
        
        # Automatisation simple : notification quotidienne √† 8h00
        test_automation = {
            "alias": "Test MCP - Notification matinale",
            "description": "Automatisation de test cr√©√©e par le serveur MCP",
            "trigger": [
                {
                    "platform": "time",
                    "at": "08:00:00"
                }
            ],
            "action": [
                {
                    "service": "persistent_notification.create",
                    "data": {
                        "title": "Bonjour!",
                        "message": "Automatisation MCP fonctionne ! Il est 8h00.",
                        "notification_id": "mcp_test_notification"
                    }
                }
            ]
        }
        
        try:
            result = await client.create_automation(test_automation)
            print(f"   ‚úÖ Automatisation cr√©√©e avec succ√®s!")
            print(f"   ID: {result.get('id', 'N/A')}")
            
            # Stocker l'ID pour nettoyage √©ventuel
            test_automation_id = result.get('id')
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la cr√©ation: {e}")
            test_automation_id = None
        
        print()
        
        # 3. Cr√©er une automatisation bas√©e sur le capteur d'√©nergie
        print("‚ö° 3. Automatisation bas√©e sur la consommation √©nerg√©tique:")
        
        energy_automation = {
            "alias": "Test MCP - Alerte consommation √©lev√©e",
            "description": "Alerte quand la consommation d√©passe un seuil",
            "trigger": [
                {
                    "platform": "numeric_state",
                    "entity_id": "sensor.kws_306wf_energie_totale",
                    "above": 700  # Alerte si plus de 700 kWh
                }
            ],
            "action": [
                {
                    "service": "persistent_notification.create",
                    "data": {
                        "title": "‚ö° Consommation √âlev√©e",
                        "message": "La consommation totale a d√©pass√© 700 kWh!",
                        "notification_id": "high_energy_consumption"
                    }
                }
            ]
        }
        
        try:
            result = await client.create_automation(energy_automation)
            print(f"   ‚úÖ Automatisation √©nerg√©tique cr√©√©e!")
            print(f"   ID: {result.get('id', 'N/A')}")
            
            energy_automation_id = result.get('id')
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la cr√©ation: {e}")
            energy_automation_id = None
        
        print()
        
        # 4. V√©rifier les automatisations cr√©√©es
        print("üîç 4. V√©rification des automatisations cr√©√©es:")
        try:
            automations = await client.list_automations()
            mcp_automations = [a for a in automations if a.get('alias', '').startswith('Test MCP')]
            
            print(f"   Trouv√© {len(mcp_automations)} automatisations MCP:")
            for auto in mcp_automations:
                print(f"   - {auto.get('alias', 'Sans nom')} (ID: {auto.get('id', 'N/A')})")
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
        
        print()
        
        # 5. Option de nettoyage (comment√©e pour √©viter la suppression accidentelle)
        print("üßπ 5. Nettoyage (automatisations de test):")
        print("   ‚ö†Ô∏è  Les automatisations de test ont √©t√© cr√©√©es.")
        print("   ‚ö†Ô∏è  Pour les supprimer, utilisez Home Assistant UI ou d√©commentez le code ci-dessous.")
        
        # D√©commenter ces lignes pour nettoyer automatiquement
        # if test_automation_id:
        #     try:
        #         await client.delete_automation(test_automation_id)
        #         print(f"   ‚úÖ Automatisation de test supprim√©e (ID: {test_automation_id})")
        #     except Exception as e:
        #         print(f"   ‚ùå Erreur suppression: {e}")
        # 
        # if energy_automation_id:
        #     try:
        #         await client.delete_automation(energy_automation_id)
        #         print(f"   ‚úÖ Automatisation √©nerg√©tique supprim√©e (ID: {energy_automation_id})")
        #     except Exception as e:
        #         print(f"   ‚ùå Erreur suppression: {e}")
        
        print("\nüéâ Test des automatisations termin√©!")
        print("\nüí° Exemples d'automatisations que vous pouvez cr√©er:")
        print("   - Allumer les lumi√®res au coucher du soleil")
        print("   - √âteindre les appareils quand personne n'est √† la maison")
        print("   - Notifications sur la consommation √©nerg√©tique")
        print("   - Climatisation automatique selon la temp√©rature")
        print("   - Sauvegarde des donn√©es de capteurs")

if __name__ == "__main__":
    asyncio.run(test_automation_features())