#!/usr/bin/env python3
"""
Test de cr√©ation d'automatisations avec affichage du YAML g√©n√©r√©
"""

import asyncio
import sys
import os
import json
from pathlib import Path
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Ajouter le chemin du module
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from homeassistant_mcp_server.server import HomeAssistantClient

async def test_automation_yaml_generation():
    """Tester la g√©n√©ration YAML d'automatisations"""
    
    hass_url = os.getenv("HASS_URL", "http://192.168.1.22:8123")
    hass_token = os.getenv("HASS_TOKEN", "")
    
    if not hass_token:
        print("‚ùå Token requis")
        return
    
    async with HomeAssistantClient(hass_url, hass_token) as client:
        print("üîß Test de g√©n√©ration d'automatisations YAML\n")
        
        # Exemple 1: Notification quotidienne
        print("üìÖ 1. Automatisation quotidienne (notification √† 8h):")
        automation1 = {
            "alias": "Notification matinale MCP",
            "description": "Notification quotidienne √† 8h cr√©√©e par MCP",
            "trigger": [
                {
                    "platform": "time",
                    "at": "08:00:00"
                }
            ],
            "action": [
                {
                    "service": "persistent_notification.create",
                    "data": {
                        "title": "üåÖ Bonjour!",
                        "message": "Il est 8h, bonne journ√©e !",
                        "notification_id": "morning_notification"
                    }
                }
            ]
        }
        
        try:
            result = await client.create_automation(automation1)
            if result.get("status") == "yaml_generated":
                print("‚úÖ YAML g√©n√©r√© avec succ√®s!")
                print(f"\n{result['yaml_content']}")
            else:
                print(f"‚úÖ Cr√©ation directe r√©ussie: {result}")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        print("\n" + "="*60 + "\n")
        
        # Exemple 2: Automatisation bas√©e sur l'√©nergie
        print("‚ö° 2. Automatisation bas√©e sur la consommation:")
        automation2 = {
            "alias": "Alerte consommation √©lev√©e",
            "description": "Alerte quand la consommation d√©passe 700 kWh",
            "trigger": [
                {
                    "platform": "numeric_state",
                    "entity_id": "sensor.kws_306wf_energie_totale",
                    "above": 700
                }
            ],
            "condition": [
                {
                    "condition": "time",
                    "after": "06:00:00",
                    "before": "22:00:00"
                }
            ],
            "action": [
                {
                    "service": "persistent_notification.create",
                    "data": {
                        "title": "‚ö° Consommation √âlev√©e D√©tect√©e",
                        "message": "Votre consommation totale a d√©pass√© 700 kWh ! Valeur actuelle: {{ states('sensor.kws_306wf_energie_totale') }} kWh",
                        "notification_id": "high_energy_alert"
                    }
                }
            ]
        }
        
        try:
            result = await client.create_automation(automation2)
            if result.get("status") == "yaml_generated":
                print("‚úÖ YAML g√©n√©r√© avec succ√®s!")
                print(f"\n{result['yaml_content']}")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        print("\n" + "="*60 + "\n")
        
        # Exemple 3: Automatisation au coucher du soleil
        print("üåÖ 3. Automatisation coucher du soleil:")
        automation3 = {
            "alias": "√âclairage automatique au coucher",
            "description": "Allume les lumi√®res 30 minutes avant le coucher du soleil",
            "trigger": [
                {
                    "platform": "sun",
                    "event": "sunset",
                    "offset": "-00:30:00"
                }
            ],
            "condition": [
                {
                    "condition": "state",
                    "entity_id": "person.jonathan_gauvin",
                    "state": "home"
                }
            ],
            "action": [
                {
                    "service": "light.turn_on",
                    "target": {
                        "area_id": "salon"
                    },
                    "data": {
                        "brightness": 180,
                        "color_temp": 400
                    }
                },
                {
                    "service": "persistent_notification.create",
                    "data": {
                        "title": "üåÜ √âclairage automatique",
                        "message": "Les lumi√®res du salon ont √©t√© allum√©es pour le coucher du soleil",
                        "notification_id": "sunset_lighting"
                    }
                }
            ]
        }
        
        try:
            result = await client.create_automation(automation3)
            if result.get("status") == "yaml_generated":
                print("‚úÖ YAML g√©n√©r√© avec succ√®s!")
                print(f"\n{result['yaml_content']}")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
        
        print("\n" + "="*60 + "\n")
        
        print("üìù Instructions pour utiliser ces automatisations:")
        print("1. Copiez le contenu YAML ci-dessus")
        print("2. Ajoutez-le √† votre fichier automations.yaml sur le Raspberry Pi")
        print("3. Red√©marrez Home Assistant ou appelez le service automation.reload")
        print("4. Les automatisations appara√Ætront dans l'interface Home Assistant")
        
        print("\nüéØ Votre serveur MCP peut maintenant:")
        print("‚úÖ G√©n√©rer des automatisations Home Assistant")
        print("‚úÖ Lister les automatisations existantes")
        print("‚úÖ Activer/d√©sactiver des automatisations")
        print("‚úÖ Utiliser votre capteur de consommation √©nerg√©tique")
        print("‚úÖ Cr√©er des d√©clencheurs temporels, d'√©tat, et bas√©s sur le soleil")

if __name__ == "__main__":
    asyncio.run(test_automation_yaml_generation())