#!/bin/bash
# =============================================================================
# Script de D√©ploiement Phase 3.4 - Raspberry Pi
# =============================================================================
# Ce script installe la nouvelle version Phase 3.4 sur Raspberry Pi
# PR√âREQUIS: Ex√©cuter migrate_pi.sh d'abord
# UTILISATION: ./deploy_pi.sh
# =============================================================================

set -e

# Configuration
PROJECT_DIR="/home/pi/homeassistant-mcp-server-v3.4"
BACKUP_DIR=$(ls -td /home/pi/backup-* 2>/dev/null | head -n1)
SERVICE_NAME="homeassistant-mcp-v3.4"
LOG_FILE="/home/pi/deployment.log"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== D√©ploiement Phase 3.4 - Raspberry Pi ===${NC}"
echo "D√©but: $(date)" | tee -a $LOG_FILE

# =============================================================================
# 1. V√âRIFICATIONS PR√âALABLES
# =============================================================================
echo -e "\n${YELLOW}‚úÖ 1. V√âRIFICATIONS PR√âALABLES${NC}"

# V√©rifier que le r√©pertoire existe
if [ ! -d "$PROJECT_DIR" ]; then
    echo -e "${RED}‚ùå R√©pertoire $PROJECT_DIR non trouv√©${NC}"
    echo "Ex√©cutez d'abord migrate_pi.sh"
    exit 1
fi

# V√©rifier les fichiers Phase 3.4
REQUIRED_FILES=("bridge_server.py" "auth_manager.py" "requirements.txt")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$PROJECT_DIR/$file" ]; then
        echo -e "${RED}‚ùå Fichier manquant: $file${NC}"
        echo "Transf√©rez tous les fichiers Phase 3.4 d'abord"
        exit 1
    fi
done

echo "‚úÖ Tous les fichiers requis sont pr√©sents"

# =============================================================================
# 2. INSTALLATION DES D√âPENDANCES
# =============================================================================
echo -e "\n${YELLOW}üì¶ 2. INSTALLATION DES D√âPENDANCES${NC}"

cd "$PROJECT_DIR"

# Cr√©er un environnement virtuel
echo "üêç Cr√©ation de l'environnement virtuel..."
python3 -m venv venv
source venv/bin/activate

# Mettre √† jour pip dans le venv
pip install --upgrade pip

# Installer les d√©pendances
echo "üì¶ Installation des d√©pendances Python..."
pip install -r requirements.txt

echo "‚úÖ D√©pendances install√©es"

# =============================================================================
# 3. RESTAURATION DES CONFIGURATIONS
# =============================================================================
echo -e "\n${YELLOW}‚öôÔ∏è  3. RESTAURATION DES CONFIGURATIONS${NC}"

if [ -n "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
    echo "üìÅ Restauration depuis: $BACKUP_DIR"
    
    # Restaurer la base de donn√©es si elle existe
    if [ -f "$BACKUP_DIR/bridge_data.db" ]; then
        echo "üíæ Restauration de la base de donn√©es..."
        cp "$BACKUP_DIR/bridge_data.db" "$PROJECT_DIR/"
        echo "   ‚úì bridge_data.db restaur√©"
    fi
    
    # Restaurer les configurations
    if [ -f "$BACKUP_DIR/config.json" ]; then
        echo "‚öôÔ∏è  Restauration des configurations..."
        cp "$BACKUP_DIR/config.json" "$PROJECT_DIR/"
        echo "   ‚úì config.json restaur√©"
    fi
    
    # Restaurer les variables d'environnement
    if [ -f "$BACKUP_DIR/.env" ]; then
        echo "üîê Restauration des variables d'environnement..."
        cp "$BACKUP_DIR/.env" "$PROJECT_DIR/"
        echo "   ‚úì .env restaur√©"
    fi
    
    echo "‚úÖ Configurations restaur√©es"
else
    echo "‚ö†Ô∏è  Aucune sauvegarde trouv√©e, configuration par d√©faut"
fi

# =============================================================================
# 4. CONFIGURATION DU SERVICE SYSTEMD
# =============================================================================
echo -e "\n${YELLOW}üîß 4. CONFIGURATION DU SERVICE SYSTEMD${NC}"

# Cr√©er le fichier de service
cat > /tmp/$SERVICE_NAME.service << EOF
[Unit]
Description=Home Assistant MCP Server Phase 3.4
After=network.target
StartLimitBurst=5
StartLimitIntervalSec=10

[Service]
Type=simple
User=pi
Group=pi
WorkingDirectory=$PROJECT_DIR
Environment=PATH=$PROJECT_DIR/venv/bin
ExecStart=$PROJECT_DIR/venv/bin/python bridge_server.py
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# Installer le service
echo "üìã Installation du service systemd..."
sudo mv /tmp/$SERVICE_NAME.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl enable $SERVICE_NAME

echo "‚úÖ Service systemd configur√©"

# =============================================================================
# 5. TESTS ET D√âMARRAGE
# =============================================================================
echo -e "\n${YELLOW}üöÄ 5. TESTS ET D√âMARRAGE${NC}"

# Test de syntaxe Python
echo "üîç V√©rification de la syntaxe..."
python -m py_compile bridge_server.py
python -m py_compile auth_manager.py
echo "‚úÖ Syntaxe Python valide"

# D√©marrer le service
echo "üöÄ D√©marrage du service..."
sudo systemctl start $SERVICE_NAME

# Attendre le d√©marrage
sleep 5

# V√©rifier le statut
echo "üìä V√©rification du statut..."
if sudo systemctl is-active --quiet $SERVICE_NAME; then
    echo "‚úÖ Service d√©marr√© avec succ√®s"
    
    # Tester la connectivit√©
    echo "üåê Test de connectivit√©..."
    sleep 3
    
    if curl -f http://localhost:3003/health >/dev/null 2>&1; then
        echo "‚úÖ API accessible sur le port 3003"
    else
        echo "‚ö†Ô∏è  API non accessible, v√©rifiez les logs"
    fi
    
else
    echo "‚ùå √âchec du d√©marrage du service"
    echo "Logs:"
    sudo journalctl -u $SERVICE_NAME --no-pager -n 20
fi

# =============================================================================
# 6. INFORMATIONS FINALES
# =============================================================================
echo -e "\n${GREEN}üéâ D√âPLOIEMENT PHASE 3.4 TERMIN√â${NC}"

echo -e "\n${BLUE}üìã INFORMATIONS DE SERVICE:${NC}"
echo "‚Ä¢ Nom du service: $SERVICE_NAME"
echo "‚Ä¢ R√©pertoire: $PROJECT_DIR"
echo "‚Ä¢ Log de d√©ploiement: $LOG_FILE"

echo -e "\n${BLUE}üîß COMMANDES UTILES:${NC}"
echo "‚Ä¢ Statut: sudo systemctl status $SERVICE_NAME"
echo "‚Ä¢ Logs: sudo journalctl -u $SERVICE_NAME -f"
echo "‚Ä¢ Red√©marrer: sudo systemctl restart $SERVICE_NAME"
echo "‚Ä¢ Arr√™ter: sudo systemctl stop $SERVICE_NAME"

echo -e "\n${BLUE}üåê ACC√àS WEB:${NC}"
echo "‚Ä¢ Dashboard: http://[IP_RASPBERRY]:3003"
echo "‚Ä¢ API Health: http://[IP_RASPBERRY]:3003/health"
echo "‚Ä¢ Login par d√©faut: admin / Admin123!"

echo -e "\n${GREEN}‚úÖ Phase 3.4 d√©ploy√©e avec succ√®s sur Raspberry Pi!${NC}"
echo "Fin: $(date)" | tee -a $LOG_FILE