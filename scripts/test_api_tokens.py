#!/usr/bin/env python3
"""
üîë Test du syst√®me de tokens API personnalis√©s pour LM Studio
"""

import asyncio
import aiohttp
import json
import sys
import os

async def test_api_tokens():
    """Test complet du syst√®me de tokens API"""
    
    print("üîë Test du syst√®me de tokens API personnalis√©s")
    print("=" * 60)
    
    base_url = "http://localhost:8080"
    
    # 1. Connexion avec utilisateur beroute
    print("1Ô∏è‚É£ Connexion utilisateur beroute...")
    
    login_data = {
        "username": "beroute",
        "password": "Anna97480"
    }
    
    async with aiohttp.ClientSession() as session:
        # Login pour obtenir le JWT token
        async with session.post(f"{base_url}/auth/login", json=login_data) as resp:
            if resp.status != 200:
                print(f"‚ùå Erreur login: {resp.status}")
                text = await resp.text()
                print(f"   R√©ponse: {text}")
                return
            
            login_response = await resp.json()
            jwt_token = login_response["access_token"]
            print(f"‚úÖ Login r√©ussi, JWT token obtenu")
        
        # Headers avec JWT token
        headers = {
            "Authorization": f"Bearer {jwt_token}",
            "Content-Type": "application/json"
        }
        
        # 2. G√©n√©rer un token API
        print("\n2Ô∏è‚É£ G√©n√©ration d'un token API pour LM Studio...")
        
        token_request = {
            "token_name": "LM Studio Test",
            "expires_days": 365
        }
        
        async with session.post(f"{base_url}/api/tokens/generate", 
                              json=token_request, headers=headers) as resp:
            if resp.status != 200:
                print(f"‚ùå Erreur g√©n√©ration token: {resp.status}")
                text = await resp.text()
                print(f"   R√©ponse: {text}")
                return
            
            token_response = await resp.json()
            api_token = token_response["token"]
            token_id = token_response["token_id"]
            print(f"‚úÖ Token API g√©n√©r√©:")
            print(f"   Token: {api_token}")
            print(f"   ID: {token_id}")
            print(f"   Expire le: {token_response['expires_at']}")
        
        # 3. Tester l'authentification avec le token API
        print("\n3Ô∏è‚É£ Test d'authentification avec le token API...")
        
        api_headers = {
            "Authorization": f"Bearer {api_token}",
            "Content-Type": "application/json",
            "X-Session-ID": "api-test-session"
        }
        
        # Test du endpoint status avec token API
        async with session.get(f"{base_url}/auth/me", headers=api_headers) as resp:
            if resp.status != 200:
                print(f"‚ùå Erreur auth token API: {resp.status}")
                text = await resp.text()
                print(f"   R√©ponse: {text}")
                return
            
            user_response = await resp.json()
            print(f"‚úÖ Authentification token API r√©ussie:")
            print(f"   Utilisateur: {user_response['username']}")
            print(f"   Auth par API token: {user_response.get('api_token_auth', False)}")
        
        # 4. Tester un appel MCP avec le token API
        print("\n4Ô∏è‚É£ Test d'appel MCP avec token API...")
        
        mcp_request = {
            "method": "get_entities",
            "params": {"format": "json"}
        }
        
        async with session.post(f"{base_url}/mcp/tools/call", 
                              json=mcp_request, headers=api_headers) as resp:
            if resp.status != 200:
                print(f"‚ùå Erreur appel MCP: {resp.status}")
                text = await resp.text()
                print(f"   R√©ponse: {text}")
                return
            
            mcp_response = await resp.json()
            entities = mcp_response.get("result", {}).get("entities", [])
            print(f"‚úÖ Appel MCP r√©ussi avec token API:")
            print(f"   {len(entities)} entit√©s r√©cup√©r√©es")
            
            # Afficher quelques entit√©s
            for i, entity in enumerate(entities[:3]):
                print(f"   - {entity.get('entity_id', 'N/A')}: {entity.get('state', 'N/A')}")
        
        # 5. Lister les tokens de l'utilisateur
        print("\n5Ô∏è‚É£ Liste des tokens API de l'utilisateur...")
        
        async with session.get(f"{base_url}/api/tokens", headers=api_headers) as resp:
            if resp.status != 200:
                print(f"‚ùå Erreur liste tokens: {resp.status}")
                text = await resp.text()
                print(f"   R√©ponse: {text}")
                return
            
            tokens_response = await resp.json()
            tokens = tokens_response.get("tokens", [])
            print(f"‚úÖ {len(tokens)} token(s) trouv√©(s):")
            for token in tokens:
                status = "Actif" if token["is_active"] else "R√©voqu√©"
                print(f"   - {token['name']} (ID: {token['id']}) - {status}")
        
        # 6. Cr√©er la configuration LM Studio mise √† jour
        print("\n6Ô∏è‚É£ Cr√©ation de la configuration LM Studio...")
        
        lm_config = {
            "mcpServers": {
                "homeassistant-bridge": {
                    "name": "Home Assistant MCP Bridge Server",
                    "command": "node",
                    "args": ["-e", "console.log('MCP Bridge Server')"],
                    "description": "Bridge HTTP vers Home Assistant via tokens API personnalis√©s",
                    "env": {
                        "BRIDGE_URL": "http://localhost:8080",
                        "HASS_URL": "http://raspberrypi:8123",
                        "API_TOKEN": api_token
                    },
                    "timeout": 30,
                    "autoStart": False
                }
            }
        }
        
        # Sauvegarder la configuration
        config_path = "configs/lm-studio-config-with-api-token.json"
        os.makedirs(os.path.dirname(config_path), exist_ok=True)
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(lm_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Configuration LM Studio sauvegard√©e: {config_path}")
        print(f"   Utilisez ce token dans LM Studio: {api_token}")
        
        print("\nüéâ Test du syst√®me de tokens API termin√© avec succ√®s!")
        print("\nüìã Prochaines √©tapes:")
        print("   1. Utilisez le token API dans LM Studio au lieu du token HA")
        print("   2. Les vrais tokens HA restent s√©curis√©s sur le serveur")
        print("   3. Chaque utilisateur peut avoir ses propres tokens personnalis√©s")
        
        return api_token

def main():
    """Point d'entr√©e principal"""
    try:
        return asyncio.run(test_api_tokens())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Test interrompu par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    token = main()
    if token:
        print(f"\nüîë Token API g√©n√©r√©: {token}")