#!/bin/bash
# =============================================================================
# Script de Migration Raspberry Pi - Phase 3.4
# =============================================================================
# Ce script g√®re la transition de l'ancienne version vers Phase 3.4
# UTILISATION: ./migrate_pi.sh
# =============================================================================

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
OLD_PROJECT_DIR="/home/pi/homeassistant-mcp-server"
NEW_PROJECT_DIR="/home/pi/homeassistant-mcp-server-v3.4"
BACKUP_DIR="/home/pi/backup-$(date +%Y%m%d-%H%M%S)"
LOG_FILE="/home/pi/migration.log"

echo -e "${BLUE}=== Migration vers Phase 3.4 - Raspberry Pi ===${NC}"
echo "D√©but: $(date)" | tee -a $LOG_FILE

# =============================================================================
# 1. AUDIT DE L'INSTALLATION ACTUELLE
# =============================================================================
echo -e "\n${YELLOW}üìã 1. AUDIT DE L'INSTALLATION ACTUELLE${NC}"

# V√©rifier les processus en cours
echo "üîç Processus Python en cours:"
ps aux | grep -i python | grep -v grep || echo "Aucun processus Python trouv√©"

# V√©rifier les ports utilis√©s
echo -e "\nüîç Ports en √©coute:"
sudo netstat -tlnp | grep -E ':(3002|3003|8080|8000)' || echo "Aucun port MCP d√©tect√©"

# V√©rifier l'ancienne installation
if [ -d "$OLD_PROJECT_DIR" ]; then
    echo -e "\nüìÇ Ancienne installation trouv√©e: $OLD_PROJECT_DIR"
    echo "   Taille: $(du -sh $OLD_PROJECT_DIR | cut -f1)"
    echo "   Fichiers: $(find $OLD_PROJECT_DIR -type f | wc -l)"
    
    # V√©rifier les fichiers critiques
    echo -e "\nüìã Fichiers critiques d√©tect√©s:"
    [ -f "$OLD_PROJECT_DIR/config.json" ] && echo "   ‚úì config.json"
    [ -f "$OLD_PROJECT_DIR/bridge_data.db" ] && echo "   ‚úì bridge_data.db"
    [ -f "$OLD_PROJECT_DIR/.env" ] && echo "   ‚úì .env"
    [ -f "$OLD_PROJECT_DIR/requirements.txt" ] && echo "   ‚úì requirements.txt"
else
    echo -e "\n‚ùå Aucune installation pr√©c√©dente trouv√©e dans $OLD_PROJECT_DIR"
fi

# =============================================================================
# 2. ARR√äT DES SERVICES EXISTANTS
# =============================================================================
echo -e "\n${YELLOW}‚èπÔ∏è  2. ARR√äT DES SERVICES EXISTANTS${NC}"

# Arr√™ter les processus Python li√©s au projet
echo "üõë Arr√™t des processus Python MCP..."
pkill -f "python.*bridge_server" || echo "Aucun bridge_server √† arr√™ter"
pkill -f "python.*mcp" || echo "Aucun processus MCP √† arr√™ter"
pkill -f "uvicorn" || echo "Aucun uvicorn √† arr√™ter"

# Attendre que les processus se terminent
sleep 3

# V√©rifier que tout est arr√™t√©
REMAINING=$(ps aux | grep -E "(bridge_server|mcp|uvicorn)" | grep -v grep | wc -l)
if [ $REMAINING -eq 0 ]; then
    echo "‚úÖ Tous les services sont arr√™t√©s"
else
    echo "‚ö†Ô∏è  $REMAINING processus encore actifs"
    ps aux | grep -E "(bridge_server|mcp|uvicorn)" | grep -v grep
fi

# =============================================================================
# 3. SAUVEGARDE DES DONN√âES IMPORTANTES
# =============================================================================
echo -e "\n${YELLOW}üíæ 3. SAUVEGARDE DES DONN√âES${NC}"

if [ -d "$OLD_PROJECT_DIR" ]; then
    echo "üìÅ Cr√©ation du r√©pertoire de sauvegarde: $BACKUP_DIR"
    mkdir -p $BACKUP_DIR
    
    # Sauvegarder les fichiers critiques
    echo "üíæ Sauvegarde en cours..."
    
    [ -f "$OLD_PROJECT_DIR/config.json" ] && cp "$OLD_PROJECT_DIR/config.json" "$BACKUP_DIR/" && echo "   ‚úì config.json sauvegard√©"
    [ -f "$OLD_PROJECT_DIR/bridge_data.db" ] && cp "$OLD_PROJECT_DIR/bridge_data.db" "$BACKUP_DIR/" && echo "   ‚úì bridge_data.db sauvegard√©"
    [ -f "$OLD_PROJECT_DIR/.env" ] && cp "$OLD_PROJECT_DIR/.env" "$BACKUP_DIR/" && echo "   ‚úì .env sauvegard√©"
    [ -d "$OLD_PROJECT_DIR/logs" ] && cp -r "$OLD_PROJECT_DIR/logs" "$BACKUP_DIR/" && echo "   ‚úì logs sauvegard√©s"
    
    # Backup complet de l'ancienne version
    echo "üì¶ Archivage complet de l'ancienne version..."
    tar -czf "$BACKUP_DIR/old_installation.tar.gz" -C $(dirname $OLD_PROJECT_DIR) $(basename $OLD_PROJECT_DIR)
    echo "   ‚úì Archive cr√©√©e: $BACKUP_DIR/old_installation.tar.gz"
    
    echo "‚úÖ Sauvegarde termin√©e dans: $BACKUP_DIR"
else
    echo "‚ö†Ô∏è  Aucune installation √† sauvegarder"
fi

# =============================================================================
# 4. NETTOYAGE DE L'ANCIENNE INSTALLATION
# =============================================================================
echo -e "\n${YELLOW}üßπ 4. NETTOYAGE DE L'ANCIENNE INSTALLATION${NC}"

read -p "‚ùì Voulez-vous supprimer l'ancienne installation? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if [ -d "$OLD_PROJECT_DIR" ]; then
        echo "üóëÔ∏è  Suppression de $OLD_PROJECT_DIR..."
        rm -rf "$OLD_PROJECT_DIR"
        echo "‚úÖ Ancienne installation supprim√©e"
    fi
    
    # Nettoyer les services systemd √©ventuels
    if systemctl list-unit-files | grep -q "homeassistant-mcp"; then
        echo "üõë D√©sactivation du service systemd..."
        sudo systemctl stop homeassistant-mcp || true
        sudo systemctl disable homeassistant-mcp || true
        echo "‚úÖ Service systemd d√©sactiv√©"
    fi
else
    echo "‚è≠Ô∏è  Conservation de l'ancienne installation"
fi

# =============================================================================
# 5. PR√âPARATION POUR LA NOUVELLE VERSION
# =============================================================================
echo -e "\n${YELLOW}üîß 5. PR√âPARATION POUR PHASE 3.4${NC}"

# Cr√©er le r√©pertoire pour la nouvelle version
echo "üìÅ Cr√©ation du r√©pertoire: $NEW_PROJECT_DIR"
mkdir -p "$NEW_PROJECT_DIR"

# V√©rifier Python et pip
echo "üêç V√©rification de Python..."
python3 --version
pip3 --version

# Mettre √† jour pip
echo "‚¨ÜÔ∏è  Mise √† jour de pip..."
pip3 install --upgrade pip

# =============================================================================
# 6. INFORMATIONS POUR LA SUITE
# =============================================================================
echo -e "\n${GREEN}‚úÖ MIGRATION PR√âPAR√âE AVEC SUCC√àS${NC}"
echo -e "\n${BLUE}üìã √âTAPES SUIVANTES:${NC}"
echo "1. Transf√©rer les fichiers Phase 3.4 vers: $NEW_PROJECT_DIR"
echo "2. Installer les d√©pendances: pip3 install -r requirements.txt"
echo "3. Restaurer les configurations depuis: $BACKUP_DIR"
echo "4. Configurer et d√©marrer la nouvelle version"
echo "5. Valider le fonctionnement"

echo -e "\n${BLUE}üìÇ R√âPERTOIRES:${NC}"
echo "‚Ä¢ Nouvelle installation: $NEW_PROJECT_DIR"
echo "‚Ä¢ Sauvegarde: $BACKUP_DIR"
echo "‚Ä¢ Log de migration: $LOG_FILE"

echo -e "\n${GREEN}üéØ Pr√™t pour le d√©ploiement Phase 3.4!${NC}"
echo "Fin: $(date)" | tee -a $LOG_FILE